有configPeriodicTask和startedPeriodicTask两个列表，里面的内容是

open class PeriodicTask {
	val uuid: String
    var id: String = ""
    var name: String = ""
    var group: String = ""
    var periodic: Int = 0
    var timeQuality: Int = 0
    var timeEstimation: Int = 0
    var batch: Int = 0
    var batchSize: Int = 0
    // This section is for Task Planning
    var dueDateTime: Long = 0L
    // This section is for Task Execution and Conclusion
    var batchRemaining: Int = 0
    var conclusion: Int = 0
    var conclusionTs: Long = 0L
}

PeriodicTask.id为对象的唯一标识
我希望
1.根据id从startedPeriodicTask中移除configPeriodicTask中不存在的元素
2.对于configPeriodicTask的所有元素，如果同时存在于startedPeriodicTask中，则将startedPeriodicTask中的该元素除dueDateTime， batchRemaining，conclusion，conclusionTs之外的所有属性更新成configPeriodicTask中的内容。否则直接将元素复制并更加入startedPeriodicTask。







根据语义，帮我完成这个函数：fun checkRefreshPeriodicTask() {
 val dayStartTs = GlDateTime.dayStartTimeStamp()
 val weekStartTs = GlDateTime.weekStartTimeStamp()
 val monthStartTs = GlDateTime.monthStartTimeStamp()
 val quarterStartTs = GlDateTime.quarterStartTimeStamp()

 val startedPeriodicTask = GlRoot.runtimeData.startedPeriodicTask.getGlDataList()
 for (startedTask in startedPeriodicTask) {
 if (startedTask.periodic == ENUM_TASK_PERIOD_ONESHOT) {
 // Do nothing
 } else if (startedTask.periodic == ENUM_TASK_PERIOD_DAILY) {
 if (startedTask.refreshTs != dayStartTs) {
 startedTask.dueDateTime = 0
 startedTask.batchRemaining = startedTask.batch
 startedTask.conclusion = ENUM_TASK_CONCLUSION_NONE
 startedTask.conclusionTs = 0L
 }
 } else if (startedTask.periodic == ENUM_TASK_PERIOD_WEEKLY) {

 } else if (startedTask.periodic == ENUM_TASK_PERIOD_BI_WEEK) {

 } else if (startedTask.periodic == ENUM_TASK_PERIOD_MONTHLY) {

 } else if (startedTask.periodic == ENUM_TASK_PERIOD_QUARTERLY) {

 }
 }
}





fun executePeriodicTask(newTaskId: String, pervTaskConclusion: Int = ENUM_TASK_CONCLUSION_NONE) {
	val startedPeriodicTask = GlRoot.runtimeData.startedPeriodicTask.getGlDataList()
}
完成这个函数。遍历列表通过id找到对应task，把它的conclusion置为ENUM_TASK_CONCLUSION_DOING。如果存在其它的task的conclusion为ENUM_TASK_CONCLUSION_DOING，则将其conclusion置为pervTaskConclusion。




holder.buttonPlay.setOnClickListener {
	GlService.executePeriodicTask(ptask.id, ENUM_TASK_CONCLUSION_NONE)
}

holder.buttonGoal.setOnClickListener {
	GlService.setPeriodicTaskConclusion(ptask.id, ENUM_TASK_CONCLUSION_FINISHED)
}

holder.buttonPause.setOnClickListener {
	GlService.setPeriodicTaskConclusion(ptask.id, ENUM_TASK_CONCLUSION_NONE)
}

holder.buttonAbandon.setOnClickListener {
	GlService.setPeriodicTaskConclusion(ptask.id, ENUM_TASK_CONCLUSION_ABANDONED)
}
			
帮我加上弹出确认提示，分别是“是否开始/完成/挂起/取消这个任务？”。如果选是，则继续执行，否则不做任何事情。











open class PeriodicTask : IGlDeclare() {
    var id: String = ""
    var name: String = ""
    var group: String = ""
    var periodic: Int = 0
    var timeQuality: Int = 0
    var timeEstimation: Int = 0
    var batch: Int = 0
    var batchSize: Int = 0
    // This section is for Task Planning
    var dueDateTime: Long = 0L
    // This section is for Task refresh time check
    var refreshTs: Long = 0L
    // This section is for Task Execution and Conclusion
    var batchRemaining: Int = 0
    var conclusion: Int = 0
    var conclusionTs: Long = 0L
}


const val ENUM_TASK_CONCLUSION_NONE = 0             // Init state
const val ENUM_TASK_CONCLUSION_DOING = 1            // After clicking start
const val ENUM_TASK_CONCLUSION_FINISHED = 2         // Mark as finished
const val ENUM_TASK_CONCLUSION_ABANDONED = 3        // Voluntarily give up
const val ENUM_TASK_CONCLUSION_FAILED = 4           // Timed out and not processed



fun checkRefreshPeriodicTask(baseDate: Date,
							 startedTasks: List< PeriodicTask >,
							 refreshedTasks: MutableList< PeriodicTask >,
							 archivedTasks: MutableList< PeriodicTask >) {
	val dayStartTs = GlDateTime.dayStartTimeStamp(baseDate)
	val weekStartTs = GlDateTime.weekStartTimeStamp(baseDate)
	val monthStartTs = GlDateTime.monthStartTimeStamp(baseDate)
	val quarterStartTs = GlDateTime.quarterStartTimeStamp(baseDate)

	for (startedTask in startedTasks) {
		val refreshTs = when (startedTask.periodic) {
			ENUM_TASK_PERIOD_ONESHOT -> null
			ENUM_TASK_PERIOD_DAILY -> dayStartTs
			ENUM_TASK_PERIOD_WEEKLY -> weekStartTs
			ENUM_TASK_PERIOD_BI_WEEK -> if (startedTask.refreshTs < weekStartTs - 7 * 24 * 3600) weekStartTs else null
			ENUM_TASK_PERIOD_MONTHLY -> monthStartTs
			ENUM_TASK_PERIOD_QUARTERLY -> quarterStartTs
			else -> null
		}
		if (refreshTs != null && startedTask.refreshTs != refreshTs) {
			if (startedTask.conclusion == ENUM_TASK_CONCLUSION_NONE ||
				startedTask.conclusion == ENUM_TASK_CONCLUSION_DOING) {
				// Process Un-finished task
				startedTask.conclusion = ENUM_TASK_CONCLUSION_FAILED
				archivedTasks.add(startedTask.copy() as PeriodicTask)
			}
			startedTask.dueDateTime = 0
			startedTask.refreshTs = refreshTs
			startedTask.batchRemaining = startedTask.batch
			startedTask.conclusion = ENUM_TASK_CONCLUSION_NONE
			startedTask.conclusionTs = 0L
			refreshedTasks.add(startedTask)
		}
	}
}


使用中文回答问题。

帮我为GlService.CoreLogic.checkRefreshPeriodicTask()写testcase。
这个函数的功能是根据startedTask.periodic和startedTask.refreshTs判断当前任务是否在对应的周期内。如果是，则首先检查该任务是否完成，再更新一系列数据并将其加入refreshedTasks；否则不做任何事情。
注意date不能取当前时间，而是按需要构造。

要求测试以下所有情况：
1.在本周期内 => 不需要更新，字段(dueDateTime, refreshTs, batchRemaining, conclusion, conclusionTs)不变
2.不在本周期内（startedTask.refreshTs小于本周期） => 需要更新，对应字段需更新到特定的值。
3.不在本周期内（startedTask.refreshTs大于本周期） =>需要更新，对应字段需更新到特定的值。
4.startedTask.refreshTs为0 => 需要更新，对应字段需更新到特定的值。
需要更新的情况需要同时穿插测试conclusion为各种值的情况，检查结果。

分批次写test case，每次写一个，内容不要太长。我说继续，写下一个。


先写ENUM_TASK_PERIOD_ONESHOT周期（任何情况都不应该被更新）

注意date不能取当前时间，而是按需要构造。然后是ENUM_TASK_PERIOD_DAILY






open class PeriodicTask : IGlDeclare() {
    var id: String = ""
    var name: String = ""
    var group: String = ""
    var periodic: Int = 0
    var property: Int = 0
    var timeQuality: Int = 0
    var timeEstimation: Int = 0
    var batch: Int = 0
    var batchSize: Int = 0
    // This section is for Task Planning
    var dueDateTime: Long = 0L
    // This section is for Task refresh time check
    var refreshTs: Long = 0L
    // This section is for Task Execution and Conclusion
    var batchRemaining: Int = 0
    var conclusion: Int = 0
    var conclusionTs: Long = 0L
}

object GlService {

    object CoreLogic {
		fun calculateTaskTolerance(tasks: List< PeriodicTask >) : List< Float > {

		}
	}
}

返回一个与tasks长度相等的列表taskToleranceList。Tolerance判断如下：

仅当conclusion为ENUM_TASK_CONCLUSION_NONE或ENUM_TASK_CONCLUSION_DOING执行下面判断，否则直接为1。
如果property为ENUM_TASK_PROPERTY_OPTIONAL，也为1。

refreshTs属性指明了这个task开始周期的时间戳（毫秒），periodic为任务的周期，共有下列类型：

const val ENUM_TASK_PERIOD_ONESHOT = 0
const val ENUM_TASK_PERIOD_DAILY = 1
const val ENUM_TASK_PERIOD_WEEKLY = 7
const val ENUM_TASK_PERIOD_BI_WEEK = 14
const val ENUM_TASK_PERIOD_MONTHLY = 30
const val ENUM_TASK_PERIOD_QUARTERLY = 90


如果dueDateTime不为0，则它就是截止时间。否则根据周期和refreshTs计算截止时间。
通过GlDateTime.timeStamp()可以取得当前时间戳
Tolerance为剩余时间和截止时间的比值






object GlService {

    object CoreLogic {

        fun calculateTaskTolerance(tasks: List<PeriodicTask>, currentTime: Long): List<Float> {
            val taskToleranceList = mutableListOf<Float>()
            for (task in tasks) {
                if ((task.conclusion == ENUM_TASK_CONCLUSION_NONE) ||
                    (task.conclusion == ENUM_TASK_CONCLUSION_DOING)) {

                    if ((task.property == ENUM_TASK_PROPERTY_OPTIONAL) || (task.refreshTs == 0L)) {
                        taskToleranceList.add(1f)
                    } else {
                        val dueTime = if (task.dueDateTime != 0L) task.dueDateTime else task.refreshTs + when (task.periodic) {
                            ENUM_TASK_PERIOD_ONESHOT -> 0
                            ENUM_TASK_PERIOD_DAILY -> 24 * 60 * 60 * 1000L
                            ENUM_TASK_PERIOD_WEEKLY -> 7 * 24 * 60 * 60 * 1000L
                            ENUM_TASK_PERIOD_BI_WEEK -> 14 * 24 * 60 * 60 * 1000L
                            ENUM_TASK_PERIOD_MONTHLY -> 31 * 24 * 60 * 60 * 1000L
                            ENUM_TASK_PERIOD_QUARTERLY -> 92 * 24 * 60 * 60 * 1000L
                            else -> throw IllegalArgumentException("Invalid periodic value")
                        }
                        val tolerance = (dueTime - currentTime).toFloat() / (dueTime - task.refreshTs)
                        taskToleranceList.add(tolerance)
                    }
                } else {
                    taskToleranceList.add(1f)
                }
            }
            return taskToleranceList
        }




用中文进行后续对话。

这个函数检查一个task剩余时间和本周期时间的比值。开始时间是refreshTs，当前时间是currentTime，dueTime根据不同情况不一样。

为calculateTaskTolerance编写测试代码，考虑正常异常及边界情况。时间不要取系统时间，要自己构造，并且将预计的dueTime输出为注释。测试时refreshTs不能初始为0。一次输出一条test case，包含测试目的在内的注释。我说继续输出下一条。












init {
	mPeriodicTasks = if (filterGroup.isNotEmpty()) {
		GlService.getStartedPeriodicTasksByGroup(filterGroup)
	} else {
		GlService.getPeriodicTasks()
	}
	mTaskUrgency = GlService.calculateTaskUrgency(mPeriodicTasks)
	
	// TODO:
}
mPeriodicTasks和mTaskUrgency长度一致，mTaskUrgency为float列表。
1.将mPeriodicTasks按mTaskUrgency对应位置的值排序。
2.mPeriodicTasks的元素的it.conclusion属性如果为以下值之一，排在最后：
const val ENUM_TASK_CONCLUSION_FINISHED = 2         // Mark as finished
const val ENUM_TASK_CONCLUSION_ABANDONED = 3        // Voluntarily give up
const val ENUM_TASK_CONCLUSION_FAILED = 4           // Timed out and not processed







使用kotlin写代码，实现：指定year和month，遍历该月所有日期的java.util.Date对象，给TODO使用。





